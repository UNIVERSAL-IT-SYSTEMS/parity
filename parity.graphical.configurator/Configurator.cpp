#include "Configurator.h"
#include "Mapping.h"
#include "SectionChooser.h"

#include <Context.h>
#include <Configuration.h>
#include <MappedFile.h>

#include <string>

using namespace System::IO;
using namespace parity::utils;

namespace paritygraphicalconfigurator {
	System::Void Configurator::EditItemDetails(System::Object^  sender, System::EventArgs^  e)
	{
		MappingStruct* ptr = SettingMapping;
		ListViewItem^ lvi = lvSettings->SelectedItems[0];

		if(lvi)
		{
			while(ptr->Name)
			{
				if(lvi->SubItems[colName->Index]->Text == gcnew String(ptr->Name))
				{
					try {
						ptr->Edit(ptr, *context_);
						UpdateConfigurationView(*context_);
						
						lvSettings->EnsureVisible(lvi->Index);
					} catch(const parity::utils::Exception& e) {
						MessageBox::Show("Error: " + gcnew String(e.what()), "Error", MessageBoxButtons::OK, MessageBoxIcon::Error);
					}
					break;
				}

				++ptr;
			}
		}
	}

	System::Void Configurator::NewConfiguration(System::Object^  sender, System::EventArgs^  e)
	{
		InitNewContext();
		CreateConfigurationView(*context_);
	}

	bool Configurator::InitNewContext()
	{
		if(context_ && initial_ && *context_ != *initial_)
		{
			if(MessageBox::Show("Discard changes to current configuration?", "Discard changes?", MessageBoxButtons::OKCancel, MessageBoxIcon::Question) == System::Windows::Forms::DialogResult::Cancel)
				return false;
		}

		context_ = new Context();
		initial_ = new Context();

		return true;
	}

	System::Void Configurator::OpenConfiguration(System::Object^  sender, System::EventArgs^  e)
	{
		if(dlgOpenFile->ShowDialog() == System::Windows::Forms::DialogResult::OK)
		{
			if(!InitNewContext())
				return;
			
			std::string native = MarshalSimpleStringToNative(dlgOpenFile->FileName);
			MappedFile file(parity::utils::Path(native), ModeRead);

			ConfigSectionMap m = Config::getSections(file);

			if(!m.empty()) {
				SectionChooser^ chooser = gcnew SectionChooser();
				std::string gen(GENERAL_CONFIG_KEY);

				for(ConfigSectionMap::iterator it = m.begin(); it != m.end(); ++it) {
					if(it->first != gen)
						chooser->lstSections->Items->Add(MarshalSimpleNativeToString(it->first));
				}

				chooser->ShowDialog();

				char ** a = (char**)malloc(sizeof(char*) * m.size() + 1);
				int i = 0;

				for(int x = 0; x < chooser->lstSections->Items->Count; ++x) {
					if(chooser->lstSections->GetSelected(x)) {
						std::string arg("-");
						arg.append(MarshalSimpleStringToNative(chooser->lstSections->Items[x]->ToString()));
						a[i++] = strdup(arg.c_str());
					}
				}

				a[i] = NULL;

				Config::parseFile(*context_, file, i, a);
				*initial_ = *context_;

				char ** b = a;
				while(*b)
					free(*b++);

				free(a);
			} else {
				Config::parseFile(*context_, file, 0, NULL);
				*initial_ = *context_;
			}

			CreateConfigurationView(*context_);
		}
	}

	System::Void Configurator::SaveConfiguration(System::Object^  sender, System::EventArgs^  e)
	{
		// TODO: implement writing to sections?

		if(dlgSaveFile->ShowDialog() == System::Windows::Forms::DialogResult::OK)
		{
			MappingStruct* ptr = SettingMapping;
			StreamWriter^ writer = gcnew StreamWriter(dlgSaveFile->FileName, false, System::Text::Encoding::ASCII);

			writer->Write("#\n# Configuration File for parity generated by parity.graphical.configurator.\n");
			writer->Write("# Both parity and parity.graphical.configurator are Copyright (c) 2007, 2008\n");
			writer->Write("# by Markus Duft (markus.duft at salomon dot at).\n#\n");
			
			writer->Write("# WARNING: The parity.graphical.configurator only writes settings to the\n");
			writer->Write("# Configuration File if they differ from the default value!\n#\n\n");

			while(ptr->Name)
			{
				if(!ptr->IsDefault(*context_))
				{
					writer->Write("# Name: {0}, Default Value: {1}, Type {2}\n", 
						gcnew String(ptr->Name), gcnew String(ptr->Default), gcnew String(ptr->Type));

					ptr->Save(writer, ptr, *context_);
				}

				++ptr;
			}

			writer->Flush();
			writer->Close();
		}
	}

	System::Void Configurator::CreateConfigurationView(parity::utils::Context& ctx)
	{
		MappingStruct * ptr = SettingMapping;

		lvSettings->Items->Clear();

		while(ptr->Name && ptr->Formatter)
		{
			ListViewItem^ lvi = 
				gcnew ListViewItem(
					gcnew array<String^>
						{
							gcnew String(ptr->Name), 
							ptr->Formatter(ctx), 
							gcnew String(ptr->Type), 
							gcnew String(ptr->Default)
						}
					, 0
				);

			lvi->UseItemStyleForSubItems = false;
			lvi->SubItems[colType->Index]->ForeColor = System::Drawing::Color::Gray;
			lvi->SubItems[colDefaultValue->Index]->ForeColor = System::Drawing::Color::Gray;

			if(ptr->IsDefault(ctx))
			{
				lvi->Group = lvSettings->Groups[1];
			} else {
				lvi->Group = lvSettings->Groups[0];
				lvi->SubItems[colValue->Index]->Font = gcnew System::Drawing::Font(lvi->SubItems[colValue->Index]->Font, System::Drawing::FontStyle::Bold);
			}

			lvi->Tag = (Object^)(long)ptr;
			lvSettings->Items->Add(lvi);

			++ptr;
		}
	}

	System::Void Configurator::UpdateConfigurationView(parity::utils::Context& ctx)
	{
		IEnumerator^ e = lvSettings->Items->GetEnumerator();

		while(e->MoveNext())
		{
			ListViewItem^ item = (ListViewItem^)e->Current;
			MappingStruct* ptr = (MappingStruct*)(long)item->Tag;

			item->SubItems[colValue->Index]->Text = ptr->Formatter(*context_);

			if(ptr->IsDefault(*context_)) {
				if(item->Group == lvSettings->Groups[0])
					item->Group = lvSettings->Groups[1];

				item->SubItems[colValue->Index]->Font = gcnew System::Drawing::Font(item->SubItems[colValue->Index]->Font, System::Drawing::FontStyle::Regular);
			} else {
				if(item->Group == lvSettings->Groups[1])
					item->Group = lvSettings->Groups[0];

				item->SubItems[colValue->Index]->Font = gcnew System::Drawing::Font(item->SubItems[colValue->Index]->Font, System::Drawing::FontStyle::Bold);
			}
		}
	}

	//
	// Helper functions
	//

	std::string Configurator::MarshalSimpleStringToNative(String^ str)
	{
		IntPtr native = System::Runtime::InteropServices::Marshal::StringToHGlobalAnsi(str);
		std::string result((char*)native.ToPointer());
		System::Runtime::InteropServices::Marshal::FreeHGlobal(native);

		return result;
	}

	String^ Configurator::MarshalSimpleNativeToString(const std::string& str)
	{
		return gcnew String(str.c_str());
	}
}
