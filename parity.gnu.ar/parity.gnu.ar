#!/usr/bin/env bash

# TODO: this is merely a hack to get things rolling - implement as real part of parity.

opts="$1"
archive="$2"

shift
shift

_verbose=no
_test=no
_warn_create=yes
_extract=no
_delete=no
_replace=no

for letter in $(echo "${opts}" | grep -o .); do
    case "${letter}" in
    v) _verbose=yes     ;;
    d) _delete=yes      ;;
    t) _test=yes        ;;
    c) _warn_create=no  ;;
    r|q) _replace=yes     ;;
    x) _extract=yes     ;;
    u|o|f) echo "warn: ignoring unsupported option '$letter'" ;;
    *) { echo "unrecognized option '$letter'"; exit 1; } ;;
    esac
done

_action_cnt=0
[[ ${_test} == yes ]] && ((_action_cnt++))
[[ ${_extract} == yes ]] && ((_action_cnt++))
[[ ${_delete} == yes ]] && ((_action_cnt++))
[[ ${_replace} == yes ]] && ((_action_cnt++))

if [[ ${_action_cnt} -gt 1 ]]; then
    echo "more than one action given (${_action_cnt}), not valid!"
    exit 1
fi

function wait_for() {
    local f="$1"
    local cnt=100
    [[ -z "${f}" ]] && return
    while [[ ! -e "${f}" && ${cnt} -gt 0 ]]; do
        sleep 0.1
        ((cnt--))
    done
}

vsvar=
[[ -n "${VS71COMNTOOLS}" ]] && vsvar=VS71COMNTOOLS
[[ -n "${VS80COMNTOOLS}" ]] && vsvar=VS80COMNTOOLS
[[ -n "${VS90COMNTOOLS}" ]] && vsvar=VS90COMNTOOLS
[[ -n "${VS100COMNTOOLS}" ]] && vsvar=VS100COMNTOOLS

[[ -z ${vsvar} ]] && { echo "cannot find visual studio (no VSxxCOMNTOOLS set!)"; exit 1; }

vscom="$(winpath2unix "$(eval echo "\${${vsvar}}")")"
vsroot="$(cd ${vscom}/../../; pwd)"

[[ -z "${vsroot}" ]] && { echo "error: cannot find visual studio installation directory"; exit 1; }
PATH=${vsroot}/VC/bin:${vscom}:${vscom}/../IDE:${PATH}

LIB="lib.exe /nologo"

if [[ ${_test} == yes ]]; then
    ${LIB} /LIST "${archive}"
elif [[ ${_replace} == yes ]]; then
    arg_arch=
    [[ ! -e ${archive} && ${_warn_create} == yes ]] && { echo "warning: file does not exist: ${archive}"; };
    [[ -e ${archive} ]] && arg_arch="${archive}"
    ${LIB} "/OUT:${archive}" ${arg_arch} "$@" || exit 1
    wait_for "${archive}"
elif [[ ${_extract} == yes ]]; then
    members=()
    doneOne=no
    for x in "$@"; do
        doneOne=yes
        xtr="/EXTRACT:${x}"
        waitFor="$(basename "$x")"
        ${LIB} "${archive}" "${xtr}" || exit 1
        wait_for "${waitFor}"
        [[ ${_verbose} == yes ]] && echo "$x"
    done
    if [[ "${doneOne}" == no ]]; then
        # no memebers given, extract all
        for x in $(${LIB} /LIST "${archive}"); do
            x="$(echo "${x}" | tr -d '\r')"
            xtr="/EXTRACT:${x}"
            waitFor="$(basename "$x")"
            ${LIB} "${archive}" "${xtr}" || exit 1
            wait_for "${waitFor}"
            [[ ${_verbose} == yes ]] && echo "$x"
        done
    fi
elif [[ ${_delete} == yes ]]; then
    tmplib="${archive}.old"
    mv "${archive}" "${tmplib}"
    members=()
    for x in "$@"; do
        members[${#members[@]}]="/REMOVE:${x}"
    done
    ${LIB} "/OUT:${archive}" "${tmplib}" "${members[@]}" || exit 1
fi

exit 0

